# Tên của workflow
name: CI - Unit & Integration Tests

# Các sự kiện kích hoạt workflow
on: [push, pull_request]

jobs:
  # Job để chạy test cho service "auth"
  test-auth:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout mã nguồn từ repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Cài đặt Node.js và bật caching cho node_modules
      # Tối ưu: Tương đương với Docker layer cache, giúp tăng tốc việc cài đặt dependencies
      - name: Setup Node.js with cache
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Hoặc phiên bản Node.js bạn đang dùng
          cache: 'npm'
          cache-dependency-path: auth/package-lock.json

      # Step 3: Cài đặt dependencies cho service "auth"
      # `npm ci` sẽ sử dụng cache nếu có, giúp tiết kiệm thời gian
      - name: Install auth dependencies
        run: npm ci --prefix auth

      # Step 4: Tạo file .env cho môi trường test của service "auth"
      # Tối ưu: Sử dụng MongoDB in-memory, không cần URI thật
      - name: Create .env file for auth
        run: |
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> auth/.env
          echo "NODE_ENV=test" >> auth/.env
          echo "MONGODB_AUTH_URI=mongodb://localhost:27017/auth_test" >> auth/.env

      # Step 5: Khởi tạo MongoDB service cho auth
      - name: Start MongoDB for auth
        uses: supercharge/mongodb-github-action@1.10.0
        with:
          mongodb-version: '6.0'

      # Step 6: Chạy test cho service "auth"
      - name: Run tests for auth
        run: npm test --prefix auth

  # Job để chạy test cho service "product"
  test-product:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout mã nguồn
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Cài đặt Node.js và bật caching cho node_modules
      # Tối ưu: Tương đương với Docker layer cache
      - name: Setup Node.js with cache
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Hoặc phiên bản Node.js bạn đang dùng
          cache: 'npm'
          cache-dependency-path: product/package-lock.json

      # Step 3: Cài đặt dependencies cho service "product"
      - name: Install product dependencies
        run: npm ci --prefix product

      # Step 4: Tạo file .env cho môi trường test của service "product"
      # Tối ưu: Không cần thông tin về auth service thật hay RabbitMQ thật
      - name: Create .env file for product
        run: |
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> product/.env
          echo "NODE_ENV=test" >> product/.env
          echo "MONGODB_PRODUCT_URI=mongodb://localhost:27017/product_test" >> product/.env
          echo "LOGIN_TEST_USER=${{ secrets.LOGIN_TEST_USER }}" >> product/.env
          echo "LOGIN_TEST_PASSWORD=${{ secrets.LOGIN_TEST_PASSWORD }}" >> product/.env

      # Step 5: Khởi tạo MongoDB service cho product
      - name: Start MongoDB for product
        uses: supercharge/mongodb-github-action@1.10.0
        with:
          mongodb-version: '6.0'

      # Step 6: Khởi tạo auth service cho product test
      - name: Start auth service for product tests
        run: |
          cd auth
          npm ci
          echo "MONGODB_AUTH_URI=mongodb://localhost:27017/auth_test" > .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          npm start &
          sleep 5
          # Create test user
          curl -X POST http://localhost:3000/register \
            -H "Content-Type: application/json" \
            -d '{"username":"'${{ secrets.LOGIN_TEST_USER }}'","password":"'${{ secrets.LOGIN_TEST_PASSWORD }}'"}' || echo "User might already exist"

      # Step 7: Chạy test cho service "product"
      - name: Run tests for product
        run: npm test --prefix product

  build-and-push:
    needs: [test-auth, test-product]
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: 3002tad
    strategy:
      matrix:
        service: [auth, product, order, api-gateway]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Verify Docker secrets
      run: |
        if [ -z "${{ secrets.DOCKER_PASSWORD }}" ]; then
          echo "❌ ERROR: DOCKER_PASSWORD secret is not set!"
          echo "Please add DOCKER_PASSWORD to repository secrets"
          exit 1
        fi
        echo "✅ Docker secrets are configured"
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        install: true
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        file: ./${{ matrix.service }}/Dockerfile
        push: true
        tags: 3002tad/eproject-${{ matrix.service }}:latest
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max